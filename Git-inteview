Q1: What is Git fork? What is difference between fork, branch and clone?

A fork is a remote, server-side copy of a repository, distinct from the original. A fork isn't a Git concept really, it's more a political/social idea.
A clone is not a fork; a clone is a local copy of some remote repository. When you clone, you are actually copying the entire source repository, including all the history and branches.
A branch is a mechanism to handle the changes within a single repository in order to eventually merge them with the rest of code. A branch is something that is within a repository. Conceptually, it represents a thread of development.

Q2: What's the difference between a "pull request" and a "branch"?

A branch is just a separate version of the code.

A pull request is when someone take the repository, makes their own branch, does some changes, then tries to merge that branch in (put their changes in the other person's code repository).


Q 3.What is the difference between "git pull" and "git fetch"?

In the simplest terms, git pull does a git fetch followed by a git merge.

In the simplest terms, git pull does a git fetch followed by a git merge.

When you use pull, Git tries to automatically do your work for you. It is context sensitive, so Git will merge any pulled commits into the branch you are currently working in. pull automatically merges the commits without letting you review them first. If you donâ€™t closely manage your branches, you may run into frequent conflicts.

When you fetch, Git gathers any commits from the target branch that do not exist in your current branch and stores them in your local repository. However, it does not merge them with your current branch. This is particularly useful if you need to keep your repository up to date, but are working on something that might break if you update your files. To integrate the commits into your master branch, you use merge.


Q 4. How to revert previous commit in git?

Q 5. What is "git cherry-pick"?

The command git cherry-pick is typically used to introduce particular commits from one branch within a repository onto a different branch. A common use is to forward- or back-port commits from a maintenance branch to a development branch.

This is in contrast with other ways such as merge and rebase which normally apply many commits onto another branch.

git cherry-pick <commit-hash>

Q6: Explain the advantages of Forking Workflow
Q7: Tell me the difference between HEAD, working tree and index, in Git?

Q8: Could you explain the Gitflow workflow?

Q9: When should I use "git stash"?

The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy.


Q10: How to remove a file from git without removing it from your file system?


Q11: When do you use "git rebase" instead of "git merge"?

